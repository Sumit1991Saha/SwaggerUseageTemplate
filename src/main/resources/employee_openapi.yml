openapi: 3.0.0
servers:
  - description: App URL
    url: https://localhost:8084/SwaggerUseageTemplate/
info:
  description: |
    Employee Api's
  version: "1.0.0"
  title: Employee Api's
  termsOfService: ''
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Employee Api's
    description:
    externalDocs:
      description: Find out more
      url: ''

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

paths:
  /employees :
    parameters:
      - $ref: '#/components/parameters/applicationId'

    get:
      tags:
        - employee
      summary: Returns a list of all the employee ids, names and description for the given application id.
      description: |
        Returns list of all the employees that belong to that application. <br>
        For getting complete details for a Employee see `GET /employees/{employee-id}`
      operationId: getEmployees
      responses:
        '200':
          description: Fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeSummaries'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

    post:
      tags:
        - employee
      summary: Create a new Employee
      description: Creates a new employee for given payload and returns the id.
      operationId: createEmployee
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'

          links:
            CreatedEmployeeId:
              operationId: getEmployee
              parameters:
                employeeId: '$response.body#/id'
              description:
                The `id` value returned in the response can be used as `employee-id` parameter in `GET /employees/{employee-id}`
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict. Employee with given name already exists.
      requestBody:
        $ref: '#/components/requestBodies/Employee'

  '/employees/{employee-id}':
    parameters:
      - $ref: '#/components/parameters/applicationId'
      - $ref: '#/components/parameters/employeeId'

    get:
      tags:
        - employee
      summary: Get a JSON representation of employee for the given employee id.
      description: Get a JSON representation of employee for the given employee id.
      operationId: getEmployee
      responses:
        '200':
          description: Fetched Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: employee with given id Not Found

    put:
      tags:
        - employee
      summary: Update existing employee using JSON representation.
      description: Update existing employee using JSON representation.
      operationId: updateEmployee
      responses:
        '200':
          description: Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: employee with given id Not Found
      requestBody:
        $ref: '#/components/requestBodies/Employee'

    delete:
      tags:
        - employee
      summary: Delete existing employee using employee id.
      description: Delete existing employee using employee id.
      operationId: deleteEmployee
      responses:
        '204':
          description: Deleted Successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Employee with given id Not Found

components:
  schemas:
    Employee:
      description: "Employee definition"
      type: object
      properties:
        id:
          description: User does not need to provide this. Will be generated by system and returned in response.
          type: integer
          format: int64
          readOnly: true
        firstName:
          description: first name of the employee.
          type: string
          minLength: 1
        lastName:
          description: last name of the employee.
          type: string
          minLength: 1
        designation:
          description: Designation of the employee.
          type: string
          minLength: 1
        employeeConfiguration:
          $ref: '#/components/schemas/EmployeeConfiguration'
      required:
        - firstName
        - lastName
        - designation
        - employeeConfiguration
      example:
        firstName: "Sumit"
        lastName: "Saha"
        designation: "Software Dev"
        employeeConfiguration:
          employeeType: "DEVELOPER"
          startDate: "01/01/2019"
          projectName: "sample project"

    EmployeeConfiguration:
      type: object
      properties:
        employeeType:
          $ref: '#/components/schemas/EmployeeType'
      required:
        - employeeType
      discriminator:
        propertyName: employeeType
        mapping:
          DEVELOPER: '#/components/schemas/Developer'
          SALES: '#/components/schemas/Sales'

    Developer:
      description: "employeeType: DEVELOPER"
      allOf:
        - $ref: '#/components/schemas/EmployeeConfiguration'
        - type: object
          properties:
            startDate:
              $ref: '#/components/schemas/Date'
            projectName:
              type: string
          required:
            - startDate
            - projectName

    Sales:
      description: "employeeType: SALES"
      allOf:
        - $ref: '#/components/schemas/EmployeeConfiguration'
        - type: object
          properties:
            startTime:
              $ref: '#/components/schemas/Time'
            fieldJob:
              type: string
          required:
            - startTime
            - fieldJob

    EmployeeType:
      type: string
      enum:
        - DEVELOPER
        - SALES

    Time:
      description: The time in 24 hour format
      type: string
      pattern: '^([01]\d|2[0-3]):?([0-5]\d)$'
      example: "14:00"

    Date:
      description: The date in the following format :- DD/MM/YYYY
      type: string
      pattern: '^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$'
      example: "01/01/2019"

    EmployeeSummaries:
      type: array
      items:
        $ref: '#/components/schemas/EmployeeSummary'

    EmployeeSummary:
      type: object
      properties:
        id:
          description: Id of the employee.
          type: integer
          format: int64
          example: 10
        firstName:
          description: first name of the employee.
          type: string
          minLength: 1
        lastName:
          description: last name of the employee.
          type: string
          minLength: 1
      required:
        - id
        - firstName
        - lastName

  parameters:
    applicationId:
      in: path
      name: application-id
      required: true
      schema:
        type: integer
        format: int64
        example: 10
    employeeId:
      in: path
      name: employee-id
      description: ID for employeeId which needs to be operated on.
      required: true
      schema:
        type: integer
        format: int64
        example: 1

  requestBodies:
    Employee:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Employee'

